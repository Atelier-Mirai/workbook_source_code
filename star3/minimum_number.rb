# Ruby は より大きな整数値を扱えますが、
# C言語に倣って、int型32ビットで表せる最大値 2^31 -1 を定数宣言しました。
# 大きな数が読みやすいように
# 適宜「_(アンダースコア)」を入れることが出来ます。
INT_MAX = 21_4748_3647

# 10個の数字が入った配列 纏めて初期値を与えています。
# 配列は、array（アレイ）と言います。
# 簡単化のために、同じ数字はないものと仮定しています。
array = [3, 15, 22, 81, 41, 83, 72, 0, 50, 33]

min = INT_MAX # 最小値を格納する変数

# 最小値を求める処理
# 最初、min に一番大きい数を入れておきます。
# そして、配列内のそれぞれの要素と比較することで、
# 一番、小さい数が、minにセットされます。
# 範囲オブジェクト 0...10 と書くことで
# 0以上10未満の繰り返しが出来ます。
(0...10).each do |i|
  if min > array[i]
    min = array[i]
  end
end

# 結果発表
(0...10).each do |i|
  printf "array[%d]: %2d \n", i, array[i]
end
printf "一番小さい数は %d です。\n", min

# 二番目に小さい数を求めます。
# array = [3, 15, 22, 81, 41, 83, 72, 0, 50, 33]
# から、一番小さい数 0 を除いた
# array =  [3, 15, 22, 81, 41, 83, 72, 50, 33]
# の中から、一番小さい数を調べたら、良いことになります。
# 0 を取り除くには、どうしたらよいのでしょうか？
# 取り除くのではなく、後ろの要素を前に詰める！ と考えます。
# 0 は 7 番目の要素ですから、
# array[7] に array[8] を代入して、
# array[8] に array[9] を代入すれば、詰めたことになります。
# そうすると、
# array = [3, 15, 22, 81, 41, 83, 72, 50, 33, 33]
# という配列になります。

# それでは、0 が array の何番目の要素であったか、
# 添字(index)を求めてみましょう。
# 添字が見つかったら、break で繰り返しを抜けます。
index = 0 # 最小値 min が何番目の要素であるか
(0...10).each do |i|
  if array[i] == min
    index = i
    break
  end
end

# index には、7番目と入っています。
# 後ろの要素を前の要素に詰めます。
# array[7] に array[8] を代入して、
# array[8] に array[9] を代入します。
(index...9).each do |i|
  array[i] = array[i + 1]
end

# 詰まっているかどうか、確認の為に出力してみましょう。
puts "詰めた結果"
(0...10).each do |i|
  printf "array[%d]: %2d \n", i, array[i]
end

# 二番目に小さい数を調べます。
min = INT_MAX
# 10まで調べなくても、9まででOKです。
(0..9).each do |i|
  if min > array[i]
    min = array[i]
  end
end

# 結果発表
printf "二番目に小さい数は、%d です。\n", min

puts "\n--------------------------------------"

# 最小値や並び替えの基礎について知って頂きたく、
# 上のコードを書きましたが、
# Ruby には、配列の並び替えを行う為のメソッドが備わっています。
array = [3, 15, 22, 81, 41, 83, 72, 0, 50, 33]
puts "並び替え前"
p array # 配列を表示する
array.sort!
puts "並び替え後"
p array # 並び替え後の配列を表示する
puts "一番小さい数は #{array[0]} です。"
puts "二番目に小さい数は #{array[1]} です。"
