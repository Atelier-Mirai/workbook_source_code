# Ruby では、
# 真であることを示す true
# 偽であることを示す false というオブジェクトが既に備わっていますので、
# プログラム中の任意の箇所で用いることが出来ます。

# 閏年かどうかはよく使うので、自作の関数（メソッド）を創って、判定することにします。
# 使いたい自作の関数（メソッド）がある場合、事前に定義する必要があります。

# グレゴリオ暦年を渡して、閏年なら、trueを返す関数
def leap_year1(year)
  # 4で割り切れる年は閏年です。
  # 但し100で割り切れる年は閏年ではありません。
  # しかしながら、400で割り切れる年は、閏年です。

  # 素直にif文で書くと次のようになります。
  # if文の中にif文を書くことも出来ます。
  if year % 4 == 0
    # 4で割り切れる年は閏年ですが、例外があるので、例外を書きます。
    if year % 100 == 0
      # 但し100で割り切れる年は閏年ではありません。とありますが、
      # さらにこれの例外があるので、例外を書きます。
      if year % 400 == 0
        # しかしながら、400で割り切れる年は、閏年です。とあるので、
        # trueを返します。
        return true
      else
        # 400で割り切れなかった年です。
        return false
      end
    else
      # 100で割り切れなかった年です。
      return true
    end
  else
    # 4で割り切れなかった年です。
    return false
  end
end

# グレゴリオ暦年を渡して、閏年なら、trueを返す関数
def leap_year2(year)
  # 4で割り切れる年は閏年です。
  # 但し100で割り切れる年は閏年ではありません。
  # しかしながら、400で割り切れる年は、閏年です。

  # 素直にif文を書くとすごく長くなってしまいました。
  # if else が複雑になっていて、合っているのか間違っているのか、
  # 確認するのも大変です。

  # 4で割り切れる.......a
  # 100で割り切れる.....b
  # 400で割り切れる.....c
  # と条件が複合しているので、
  # 閏年かどうか........x
  # 表にして整理すると、分かりやすいです。
  # （真偽値表、カルノー図と言います）

  # 割り切れることを true: T
  # 割り切れないことを false: F として、表にしてみましょう。
  # ８とおりの組み合わせが出来ます。
  # - が入っているところは、あり得ない組み合わせのところです。
  # 4 で割り切れなければ、当然、100 でも 400 でも割り切れませんものね。

  # a b c x
  # F - - F ... 1
  # F - - F ... 2
  # F - - F ... 3
  # F - - F ... 4
  # T F - T ... 5
  # T F - T ... 6
  # T T F F ... 7
  # T T T T ... 8

  # 表を見ると、5 と 6 は同じですので、
  # 5 または 8の場合で、閏年になることが分かります。
  # つまり、
  # 4で割り切れて、100で割り切れない年
  # または、
  # 4で割り切れて、100で割り切れて、400で割り切れる年=400で割り切れる年
  # の場合に閏年になることが分かります。

  # よって次のif文でよいことが分かります。
  # (論理積演算子&&は、論理和演算子||より、優先順位が高いので
  #  ()は不要ですが、分かりやすさの為に、()を付けています。)
  if (year % 4 == 0 && year % 100 != 0) || year % 400 == 0
    return true
  else
    return false
  end

  # 1600, 1700, 2000, 2004, 2099, 2100年を入れて、確認してみましょう。
  # （どのテストケースで確認すべきか、考えるのも大切です）
end


# 関数（メソッド）定義が完了したので、メインとなる処理を記述して行きます。

# 使い方の説明表示
# コマンドラインから、引数を渡すことも出来ます。
# ($PROGRAM_NAME はプログラム自身の名前です。)
if ARGV.size == 0
  puts <<~EOS
   【使い方】
    閏年leap yearか、平年common yearか、算出するプログラムです。
    #{$PROGRAM_NAME} 2030
    の様にグレゴリオ暦年で入力して下さい。
  EOS
  exit # プログラムを終了します。
end

year = ARGV[0].to_i # グレゴリオ暦年
                    # to_i メソッドで整数型に変換します

if year == 0
  # エラーメッセージ出力
  printf "%s は、グレゴリオ暦年として認識出来ませんでした。\n", ARGV[0]
  exit 1 # エラーコード 1 として、異常であることを伝えて終了します。
end

# 事前に定義した閏年判定関数（メソッド）を呼び出します。
# leap_year1 : 長いif文の関数（メソッド）
if leap_year1(year)
  puts "閏年です。"
else
  puts "平年です。"
end

# leap_year2 : 整理したif文の関数（メソッド）
if leap_year2(year)
  puts "閏年です。"
else
  puts "平年です。"
end
