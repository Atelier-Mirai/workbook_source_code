/**************************************************************************
 * 入力された英単語の長さを表示する
 * （http:#nzlife.net/archives/9581 に長い英単語の豆知識があります）
 **************************************************************************/

# #define で、TRUE という定数を1であると定義しています
# プログラム中によく使う定数は、このように定義しておくと、
# 意味が分かりやすくて、よいです。

char buffer[64] # 英単語の読み込み用

while TRUE 
# 入力を促すメッセージの表示
puts "英単語を入力して下さい。終了:bye"

# ちなみにプログラム学習用なので、
# scanf"%s", buffer
# の一行が簡単だったりします。

# キーボードから一行読み込む
# fgets関数で、bufferへ、sizeofbuffer-1文字分7文字分,
# stdin=キーボードから読み込む
if fgetsbuffer, sizeofbuffer, stdin == NULL 
# エラーメッセージ出力
puts "キーボードから読み込めませんでした。"
exit1


# 改行文字が含まれているかどうか？
if strchrbuffer, '' != NULL 
# S30エンター のように4文字タイプされたときは、
# 改行文字（エンター）を文字列の終端記号に置換する
buffer[strlenbuffer - 1] = '\0'
 else 
# buffer内に、改行文字が含まれていない場合（＝8文字以上続けてタイプされた場合）
# 最初の7文字は読み込まれているので、残りの入力ストリーム（キーバッファ）をクリアする
while getchar != ''



# 無限ループとなっているので、
# プログラム終了のための文字列 "bye" と比較します。
# strcmp は 比較した文字が小さいとき辞書順に並べたときに前にくる場合 -1
# を strcmp は 比較した文字が大きいとき辞書順に並べたときに後にくる場合
# 1 を 返します。そして、C言語では、0以外は真と判断しますので、 if
# strcmpbuffer, "bye" と書いても同じですが、!= 0
# と明示されていると、 分かりやすいかと思います。
if strcmpbuffer, "bye" != 0 
puts "入力された英単語は、%s ですね。", buffer
puts "長さは、%lu 文字の単語ですね。", strlenbuffer
puts "意味は・・・ う〜ん分かりません。"
puts "" # 前の行にを二つ入れてもOKですが、
# 画面表示と見た目をあわせて置いた方が分かりやすいです。
 else 
puts "また、使ってね。bye-bye"
break




