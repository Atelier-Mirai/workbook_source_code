# 誤差が気になる場合には、有理数型(rational number)として計算出来ます。
capability = 1.0r # 能力 最後に「r」を付けます。

# times メソッドを使って 繰り返し回数を指定できます。
365.times do
  capability *= 1.01r  # 最後に「r」を付けます。
  # capability = capability * 1.01r と書くことも出来ます。
  # 自分自身に何かの計算を行い、
  # その結果を自分自身に代入することは、よく行われるので、
  # 代入と計算を一緒に行える、自己代入演算子がRubyには用意されています。
end

# 有理数型 として計算したので誤差なく求めることが出来ました。
puts "一年後の能力は #{capability} です。"

# capability の値ですが、3778...501 / 10...000と長大な分数です。
# これを 37.78... と小数の形で表しましょう。
# Ruby には 小数にするメソッドとして to_f が用意されています。
puts capability.to_f
# が、有効桁数 15 桁となります。(浮動小数点型の仕様です)

# せっかく 有効桁数732桁まで求めたので、そのまま表示したいものです。
# (演算を行うわけではないので)表示するだけでしたら、文字列で十分です。
# Ruby には 文字列にするメソッドとして to_s が用意されています。
# 文字列にした結果を 変数 str に格納します。
string = capability.to_s
# 途中「/」以降の分母の部分は不要ですから、捨てることにします。
# Ruby には 文字列を分割するメソッドとして split が用意されています。
# 結果は、「/」で区切られた配列で返りますので、変数fraction(分数)で受け取ります。
fraction    = string.split("/") # 分数
numerator   = fraction[0]       # 分子
denominator = fraction[1]       # 分母
# 分子は 3778...501 ですが、分母は 10...000 です。
# 分数の値は 37.78...501となりますので、
# 分子の37の次に小数点「.」を挿入すれば良いです。
# Ruby には 文字列に挿入するメソッドとして insert が用意されています。
# 文字列は 先頭から 0文字目、1文字目と数えて行きます。
# 2文字目に「.」を挿入したいので、次のように書きます。
floating_point = numerator.insert(2, ".") # 小数点
# 小数点にできましたので、表示します。
puts "一年後の能力は #{floating_point} です。"

# 分かりやすく、中間変数を多用して書きましたが、一行で纏めて書くことも出来ます。
puts "一年後の能力は #{capability.to_s.split("/")[0].insert(2, ".")} です。"
